Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values)
   return _elm.Main.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   _P = _N.Ports.make(_elm),
   $moduleName = "Main",
   $Basics = Elm.Basics.make(_elm),
   $Keyboard = Elm.Keyboard.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Text = Elm.Text.make(_elm),
   $Time = Elm.Time.make(_elm);
   var render = function (_v0) {
      return function () {
         switch (_v0.ctor)
         {case "::": switch (_v0._1.ctor)
              {case "::":
                 switch (_v0._1._1.ctor)
                   {case "[]":
                      return $Text.asText({ctor: "_Tuple3"
                                          ,_0: _v0._1._0.a
                                          ,_1: _v0._1._0.v
                                          ,_2: _v0._1._0.pos});}
                   break;}
              break;}
         _U.badCase($moduleName,
         "on line 43, column 5 to 31");
      }();
   };
   var input = function () {
      var delta = $Time.fps(10);
      return A2($Signal.sampleOn,
      delta,
      A3($Signal.map2,
      F2(function (v0,v1) {
         return {ctor: "_Tuple2"
                ,_0: v0
                ,_1: v1};
      }),
      delta,
      $Keyboard.arrows));
   }();
   var scale = F2(function (k,
   _v6) {
      return function () {
         switch (_v6.ctor)
         {case "_Tuple2":
            return {ctor: "_Tuple2"
                   ,_0: k * _v6._0
                   ,_1: k * _v6._1};}
         _U.badCase($moduleName,
         "on line 14, column 18 to 26");
      }();
   });
   var dot = F2(function (_v10,
   _v11) {
      return function () {
         switch (_v11.ctor)
         {case "_Tuple2":
            return function () {
                 switch (_v10.ctor)
                 {case "_Tuple2":
                    return _v10._0 * _v11._0 + _v10._1 * _v11._1;}
                 _U.badCase($moduleName,
                 "on line 13, column 23 to 36");
              }();}
         _U.badCase($moduleName,
         "on line 13, column 23 to 36");
      }();
   });
   var len = function (v) {
      return $Basics.sqrt(A2(dot,
      v,
      v));
   };
   var norm = function (v) {
      return A2(scale,
      1 / len(v),
      v);
   };
   var add = F2(function (_v18,
   _v19) {
      return function () {
         switch (_v19.ctor)
         {case "_Tuple2":
            return function () {
                 switch (_v18.ctor)
                 {case "_Tuple2":
                    return {ctor: "_Tuple2"
                           ,_0: _v18._0 + _v19._0
                           ,_1: _v18._1 + _v19._1};}
                 _U.badCase($moduleName,
                 "on line 12, column 24 to 36");
              }();}
         _U.badCase($moduleName,
         "on line 12, column 24 to 36");
      }();
   });
   var sub = F2(function (_v26,
   _v27) {
      return function () {
         switch (_v27.ctor)
         {case "_Tuple2":
            return function () {
                 switch (_v26.ctor)
                 {case "_Tuple2":
                    return {ctor: "_Tuple2"
                           ,_0: _v26._0 - _v27._0
                           ,_1: _v26._1 - _v27._1};}
                 _U.badCase($moduleName,
                 "on line 11, column 24 to 36");
              }();}
         _U.badCase($moduleName,
         "on line 11, column 24 to 36");
      }();
   });
   var g_con = 6.67384e-11;
   var gravity = F2(function (o1,
   o2) {
      return function () {
         var m2 = o2.m;
         var m1 = o1.m;
         var p2 = o2.pos;
         var p1 = o1.pos;
         var r = A2(sub,p2,p1);
         return A2(scale,
         (0 - g_con) * m1 * m2 / A2(dot,
         r,
         r) / m2,
         norm(r));
      }();
   });
   var step = F2(function (_v34,
   _v35) {
      return function () {
         switch (_v35.ctor)
         {case "::":
            switch (_v35._1.ctor)
              {case "::":
                 switch (_v35._1._1.ctor)
                   {case "[]": return function () {
                           switch (_v34.ctor)
                           {case "_Tuple2":
                              return function () {
                                   var acc = A2(gravity,
                                   _v35._0,
                                   _v35._1._0);
                                   var vel = A2(add,
                                   _v35._1._0.v,
                                   A2(scale,_v34._0,acc));
                                   var position = A2(add,
                                   _v35._1._0.pos,
                                   A2(scale,_v34._0,vel));
                                   var newMe = _U.replace([["a"
                                                           ,acc]
                                                          ,["v",vel]
                                                          ,["pos",position]],
                                   _v35._1._0);
                                   return _L.fromArray([_v35._0
                                                       ,newMe]);
                                }();}
                           _U.badCase($moduleName,
                           "between lines 34 and 40");
                        }();}
                   break;}
              break;}
         _U.badCase($moduleName,
         "between lines 34 and 40");
      }();
   });
   var ball = {_: {}
              ,a: {ctor: "_Tuple2"
                  ,_0: 0
                  ,_1: 0}
              ,m: 0.5
              ,pos: {ctor: "_Tuple2"
                    ,_0: 0
                    ,_1: 10}
              ,v: {ctor: "_Tuple2"
                  ,_0: 0
                  ,_1: 0}};
   var earth = {_: {}
               ,a: {ctor: "_Tuple2"
                   ,_0: 0
                   ,_1: 0}
               ,m: 5.972e24
               ,pos: {ctor: "_Tuple2"
                     ,_0: 0
                     ,_1: -6371000}
               ,v: {ctor: "_Tuple2"
                   ,_0: 0
                   ,_1: 0}};
   var main = A2($Signal.map,
   render,
   A3($Signal.foldp,
   step,
   _L.fromArray([earth,ball]),
   input));
   _elm.Main.values = {_op: _op
                      ,earth: earth
                      ,ball: ball
                      ,g_con: g_con
                      ,sub: sub
                      ,add: add
                      ,dot: dot
                      ,scale: scale
                      ,len: len
                      ,norm: norm
                      ,gravity: gravity
                      ,input: input
                      ,step: step
                      ,render: render
                      ,main: main};
   return _elm.Main.values;
};